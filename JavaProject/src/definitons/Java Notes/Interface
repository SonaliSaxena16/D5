-Interface is a BLUEPRINT of a CLASS. Basically how the class will look like what 
properties and behaviour it wud have. all wud be defined by Interface. 
Ex - Car Interface wud have start, stop and restart method now every class whosoever 
implementing Car Interface wud be telling abot how the car starts stops and refuel. 
-Interface is achieving 100% Abstraction
-We need to write keyword ex - public interface Car
-As it's 100% abstraction, all the methods defined here are by default abstract means without body & param only name
-As methods are by default Abstract no need to specify keyword Abstract in method in an Interface
-Child class Bmw needs to implement the interface Car & must provide implementation to every method defined in Car
-Object can't be created for Interface
-We can define only Static, Final variable. Also no need to write final by default it's final in nature
-If you've initialized int wheel = 4, now child cls can't update the value
-When to use Interface, when you want to completely hide ur functionality/bussiness logic. Now BMW is a child class 
implements Car interface. Now nobody will come to know abt the implemetation of the start() stop() & restart()

public interface car{

		 void start();
		 void stop();
		 void refuel();

}

-Note, now it's the child class responsibility to give implementation to all of the above mentioned abstract methods


 
