-Whenever we are creating a class we've to provide some info to the JVM about our classes like -
1. Whether this class,method or variable is accessible from any other class/pkg  
2. Whether we can create child class
3. Whether these class,method or variables are Inheritable. 

Modifiers applicable for Top Level Classes - public, default, final, abstract
Modifiers applicable for Top Level Classes - All Top Level + private, protected, static

Access Modifiers (which controls the access level) are - Default ,Private, Protected & Public
Non-Access Modifiers (Doesn't control access levels but provides other functionalities) - Static, Final, Abstract, Synchronized etc.

AccessModifier	withinSameCls	childClsSamePkg childClsOutsidePkg	 nonChildClsSamePkg nonChildClsOutsidePkg
Public				Y					Y				Y					Y					Y
Protected 			Y					Y			usingExtends			N					N
Default				Y					Y				N					N					N
Private				Y					N				N					N					N
	
In order to use PRIVATE ACCESS MODIFIER, we use getters (that plz give us the info stored under pvt modifier) and
setter(that now plz set this value which you provided to us)	
	
	IMP NOTES
	
	if no access modifier is specified for a class it is considered as DEFAULT
	
	1 One cannot access Private var or method directly
	2 Private cannot be used in Inheritance
	3 For Inheritance specifically PROTECTED has been created it's as same as PVT it's just it can be used in INHERITANCE
	4 We cannot use PROTECTED directly as same as PVT one shud extend the Parent class
	
	PROTECTED CAN'T BE APPLIED ON CLASS CAN BE APPLIED ONLY ON DATA MEMBERS AND METHODS()
	
	Example - 
	
	Pkg1-
	class CodeEra{
	protected void msg(){
	sysout("Working of protected modifier"); }
	}
	
	Pkg2-
	class Demo extends CodeEra{
	psvm(String[] args){
	Demo obj = new Demo();
	obj.msg()
	}
	
	OUTPUT - Working of protected modifier
