												ABSTRACTION	in JAVA
Hiding the partial implementation and showing the functionality only is called ABSTRACTION bcz methods may or may not be 
abstract
We can create Abstract class.
An abstract class may or may not have any abstract() method.
If a method is ABSTRACT, then class must be ABSTRACT and if class is ABSTRACT there may or may not be Abstract methods 
present.
Object can't be created for Abstract class
You can achieve 0-100% abstraction in ABSTRACION CLASS
Showing partial implementations like Abstract Parent class: Bank have common non-abstract methods like deposit()and withdraw() and one 
abstract() like loanROI() now every child class must provide implementation for it. Hence hiding the partial functionality for some methods
like loan()
Performance wise Abstract classes are faster then Interface bcz methods defined in Test class need to traverse a lot first
TestClass to ParentClass then to find it's implementation it'll goto child class


										INTERFACE
										
Interface in Java is a mechanism to achieve 100% Abstraction
Hiding the complete implementation and showing the functionality only is called INTERFACE bcz all of the methods are abstract by default
Object can't be created here
Performance wise Abstract classes are faster then Interface bcz methods defined in Test class need to traverse a lot first TestClass to ParentClass 
then to find it's implementation it'll goto child class									
										

Difference in Abstraction & Interface -

			Abstraction 																						Interface
Hiding the partial implementation and showing the functionality only || Hiding the complete implementation and showing the functionality only 		
can have Abstract & non-abstract methods || All methods are by default Abstract
constructor can be defined here || can't be defined in Interface
variables can be of Static,Final, Non-Static and Non-Final || variables are of public static and final type by default
It includes class || It includes Interface as the name suggests
It always class extends class and then Implements interface || Interface always extends interface

														|| Interface also represents the IS-A relationship

NOTE -> InterfaceA implements class B - NOT Possible as u can't traverse Interface to Class
NOTE -> InterfaceA implements class B,C - NOT Possible as u can't traverse Interface to single or multiple Class
But Class A extends Class B implements Interface C,D.


