Que - Prove How Strings are immutable in Java ?
Do u mean if String s = "10"; & in next line I wont be able to update  the value ?
As s = "20" ? Is that so ?

Ans - No it doesn't meant that. Every time we're trying to update the value for variable 's' it wud
be pointing to the new value ex- earlier it was 10 then updated to 20 that does not mean that old
value 10 is replaced with new va 20 no its still present thr in the StringConstantPool however with no
reference var now it wud be treated as a Garbage and wud be removed by using Java Garbage Collector.
Refer to Screenshot in Github - String are immutable in java.png

// Ex - how strings are immutable if I try to chng values

		String sb = new String("Demo");
		sb.concat("class");
		System.out.println("Unchanged sb = " + sb); Output -  Demo
		// And now if I assign the concatinated value to the original var
		sb=sb.concat("class"); 
		System.out.println("changed sb = " + sb); Output -  DemoClass
		
Que What happened to the Older Value ?
Ans The older value Demo in the above case wub be taken as a garbage and removed by Java Garbage
Collector but the point is value is still present it wasn't replaced or updated with new value.
For reference - Chk Screenshot in Git Repo named as Strings are Immutable & String Constant Pool
& Heap Memory.
	
		